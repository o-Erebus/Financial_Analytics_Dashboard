import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Card,
    CardContent,
    Grid,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Paper,
    Avatar,
    Chip,
    TextField,
    InputAdornment,
    Button,
    AppBar,
    Toolbar,
    IconButton,
    Drawer,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Checkbox,
    FormControlLabel,
    TablePagination,
    Alert,
    Snackbar,
    Divider,
    Container,
    useTheme,
    alpha
} from '@mui/material';
import {
    Dashboard as DashboardIcon,
    AccountBalance as TransactionsIcon,
    AccountBalanceWallet as WalletIcon,
    Analytics as AnalyticsIcon,
    Person as PersonIcon,
    Message as MessageIcon,
    Settings as SettingsIcon,
    Search as SearchIcon,
    Notifications as NotificationsIcon,
    GetApp as ExportIcon,
    Menu as MenuIcon,
    FilterList as FilterIcon,
    TrendingUp,
    TrendingDown,
    AccountBalance,
    Savings
} from '@mui/icons-material';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';

// Types
interface Transaction {
    _id: string;
    id: number;
    date: string;
    amount: number;
    category: 'Revenue' | 'Expense';
    status: 'Paid' | 'Pending';
    user_id: string;
    user_profile?: string;
}

interface User {
    _id: string;
    username: string;
    token: string;
}

interface DashboardStats {
    totalRevenue: number;
    totalExpenses: number;
    netProfit: number;
    categoryBreakdown: Array<{ category: string; total: number }>;
    revenueVsExpensesTrend: Array<{
        year: number;
        month: number;
        category: string;
        totalAmount: number;
    }>;
}

// Mock data for demonstration
const mockTransactions: Transaction[] = [
    {
        _id: '1',
        id: 1,
        date: '2024-04-20T00:00:00.000Z',
        amount: 80.09,
        category: 'Revenue',
        status: 'Paid',
        user_id: 'Matheus Ferrero',
        user_profile: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face'
    },
    {
        _id: '2',
        id: 2,
        date: '2024-04-19T00:00:00.000Z',
        amount: 7.03,
        category: 'Expense',
        status: 'Paid',
        user_id: 'Floyd Miles',
        user_profile: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=32&h=32&fit=crop&crop=face'
    },
    {
        _id: '3',
        id: 3,
        date: '2024-04-19T00:00:00.000Z',
        amount: 30.09,
        category: 'Expense',
        status: 'Pending',
        user_id: 'Jerome Bell',
        user_profile: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=32&h=32&fit=crop&crop=face'
    }
];

const mockTrendData = [
    { month: 'Jan', Income: 300, Expenses: 200 },
    { month: 'Feb', Income: 450, Expenses: 300 },
    { month: 'Mar', Income: 400, Expenses: 250 },
    { month: 'Apr', Income: 500, Expenses: 350 },
    { month: 'May', Income: 350, Expenses: 280 },
    { month: 'Jun', Income: 600, Expenses: 400 },
    { month: 'Jul', Income: 550, Expenses: 380 },
    { month: 'Aug', Income: 700, Expenses: 450 },
    { month: 'Sep', Income: 400, Expenses: 300 },
    { month: 'Oct', Income: 650, Expenses: 420 },
    { month: 'Nov', Income: 500, Expenses: 350 },
    { month: 'Dec', Income: 800, Expenses: 500 }
];

const COLORS = ['#4CAF50', '#FF9800'];

const App: React.FC = () => {
    const theme = useTheme();
    const [drawerOpen, setDrawerOpen] = useState(false);
    const [selectedMenuItem, setSelectedMenuItem] = useState('Dashboard');
    const [transactions, setTransactions] = useState<Transaction[]>(mockTransactions);
    const [searchTerm, setSearchTerm] = useState('');
    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(10);
    const [exportDialogOpen, setExportDialogOpen] = useState(false);
    const [selectedColumns, setSelectedColumns] = useState<string[]>(['id', 'date', 'amount', 'category', 'status', 'user_id']);
    const [filterDialogOpen, setFilterDialogOpen] = useState(false);
    const [filters, setFilters] = useState({
        category: '',
        status: '',
        startDate: '',
        endDate: '',
        minAmount: '',
        maxAmount: ''
    });
    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });

    const menuItems = [
        { text: 'Dashboard', icon: <DashboardIcon /> },
        { text: 'Transactions', icon: <TransactionsIcon /> },
        { text: 'Wallet', icon: <WalletIcon /> },
        { text: 'Analytics', icon: <AnalyticsIcon /> },
        { text: 'Personal', icon: <PersonIcon /> },
        { text: 'Message', icon: <MessageIcon /> },
        { text: 'Setting', icon: <SettingsIcon /> }
    ];

    const availableColumns = [
        { key: 'id', label: 'ID' },
        { key: 'date', label: 'Date' },
        { key: 'amount', label: 'Amount' },
        { key: 'category', label: 'Category' },
        { key: 'status', label: 'Status' },
        { key: 'user_id', label: 'User' }
    ];

    // Calculate dashboard stats
    const stats = {
        balance: 41210,
        revenue: 41210,
        expenses: 41210,
        savings: 41210
    };

    const recentTransactions = transactions.slice(0, 3);

    const filteredTransactions = transactions.filter(transaction => {
        const matchesSearch = transaction.user_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
            transaction.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
            transaction.status.toLowerCase().includes(searchTerm.toLowerCase());

        const matchesCategory = !filters.category || transaction.category === filters.category;
        const matchesStatus = !filters.status || transaction.status === filters.status;

        return matchesSearch && matchesCategory && matchesStatus;
    });

    const handleExport = () => {
        const csvContent = generateCSV(filteredTransactions, selectedColumns);
        downloadCSV(csvContent, 'transactions.csv');
        setExportDialogOpen(false);
        setSnackbar({ open: true, message: 'Transactions exported successfully!', severity: 'success' });
    };

    const generateCSV = (data: Transaction[], columns: string[]): string => {
        const headers = columns.map(col => availableColumns.find(c => c.key === col)?.label || col).join(',');
        const rows = data.map(transaction =>
            columns.map(col => {
                const value = transaction[col as keyof Transaction];
                return typeof value === 'string' ? `"${value}"` : value;
            }).join(',')
        );
        return [headers, ...rows].join('\n');
    };

    const downloadCSV = (content: string, filename: string) => {
        const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    const formatAmount = (amount: number, category: string) => {
        const formatted = `$${amount.toFixed(2)}`;
        return category === 'Revenue' ? `+${formatted}` : `-${formatted}`;
    };

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleDateString('en-US', {
            weekday: 'short',
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });
    };

    const getStatusColor = (status: string) => {
        return status === 'Paid' ? 'success' : 'warning';
    };

    const getAmountColor = (category: string) => {
        return category === 'Revenue' ? theme.palette.success.main : theme.palette.error.main;
    };

    return (
        <Box sx={{ display: 'flex', bgcolor: '#0A0E1A', minHeight: '100vh', color: 'white', minWidth: '100vw' }}>
            {/* Sidebar */}
            <Drawer
                variant="permanent"
                sx={{
                    width: 280,
                    flexShrink: 0,
                    '& .MuiDrawer-paper': {
                        width: 280,
                        boxSizing: 'border-box',
                        bgcolor: '#0A0E1A',
                        borderRight: '1px solid rgba(255, 255, 255, 0.1)',
                        color: 'white'
                    },
                }}
            >
                <Box sx={{ p: 3 }}>
                    <Typography variant="h5" sx={{ fontWeight: 'bold', color: '#00D4AA' }}>
                        Penta
                    </Typography>
                </Box>
                <List sx={{ px: 2 }}>
                    {menuItems.map((item) => (
                        <ListItem
                            key={item.text}
                            onClick={() => setSelectedMenuItem(item.text)}
                            sx={{
                                borderRadius: 2,
                                mb: 1,
                                bgcolor: selectedMenuItem === item.text ? 'rgba(0, 212, 170, 0.1)' : 'transparent',
                                color: selectedMenuItem === item.text ? '#00D4AA' : 'rgba(255, 255, 255, 0.7)',
                                cursor: 'pointer',
                                '&:hover': {
                                    bgcolor: 'rgba(0, 212, 170, 0.05)'
                                }
                            }}
                        >
                            <ListItemIcon sx={{ color: 'inherit', minWidth: 40 }}>
                                {item.icon}
                            </ListItemIcon>
                            <ListItemText primary={item.text} />
                        </ListItem>
                    ))}
                </List>
            </Drawer>

            {/* Main Content */}
            <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
                {/* Header */}
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
                    <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                        Dashboard
                    </Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                        <TextField
                            placeholder="Search..."
                            size="small"
                            sx={{
                                '& .MuiOutlinedInput-root': {
                                    bgcolor: 'rgba(255, 255, 255, 0.05)',
                                    color: 'white',
                                    '& fieldset': { borderColor: 'rgba(255, 255, 255, 0.2)' },
                                    '&:hover fieldset': { borderColor: 'rgba(255, 255, 255, 0.3)' },
                                    '&.Mui-focused fieldset': { borderColor: '#00D4AA' }
                                }
                            }}
                            InputProps={{
                                startAdornment: (
                                    <InputAdornment position="start">
                                        <SearchIcon sx={{ color: 'rgba(255, 255, 255, 0.5)' }} />
                                    </InputAdornment>
                                ),
                            }}
                        />
                        <IconButton sx={{ color: 'white' }}>
                            <NotificationsIcon />
                        </IconButton>
                        <Avatar
                            src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face"
                            sx={{ width: 40, height: 40 }}
                        />
                    </Box>
                </Box>

                {/* Stats Cards */}
                <Grid container spacing={3} sx={{ mb: 4 }}>
                    {[
                        { title: 'Balance', value: stats.balance, icon: <AccountBalance />, color: '#00D4AA' },
                        { title: 'Revenue', value: stats.revenue, icon: <TrendingUp />, color: '#4CAF50' },
                        { title: 'Expenses', value: stats.expenses, icon: <TrendingDown />, color: '#FF5722' },
                        { title: 'Savings', value: stats.savings, icon: <Savings />, color: '#2196F3' }
                    ].map((stat) => (
                        <Grid item xs={12} sm={6} md={3} key={stat.title}>
                            <Card
                                sx={{
                                    bgcolor: 'rgba(255, 255, 255, 0.05)',
                                    backdropFilter: 'blur(10px)',
                                    border: '1px solid rgba(255, 255, 255, 0.1)',
                                    color: 'white'
                                }}
                            >
                                <CardContent>
                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                        <Box
                                            sx={{
                                                p: 1,
                                                borderRadius: 2,
                                                bgcolor: alpha(stat.color, 0.1),
                                                color: stat.color
                                            }}
                                        >
                                            {stat.icon}
                                        </Box>
                                        <Box>
                                            <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                                                {stat.title}
                                            </Typography>
                                            <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
                                                ${stat.value.toLocaleString()}
                                            </Typography>
                                        </Box>
                                    </Box>
                                </CardContent>
                            </Card>
                        </Grid>
                    ))}
                </Grid>

                <Grid container spacing={3}>
                    {/* Overview Chart */}
                    <Grid item xs={12} lg={8}>
                        <Card
                            sx={{
                                bgcolor: 'rgba(255, 255, 255, 0.05)',
                                backdropFilter: 'blur(10px)',
                                border: '1px solid rgba(255, 255, 255, 0.1)',
                                color: 'white',
                                height: 400
                            }}
                        >
                            <CardContent>
                                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                                    <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                                        Overview
                                    </Typography>
                                    <Box sx={{ display: 'flex', gap: 2 }}>
                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                            <Box sx={{ width: 12, height: 12, bgcolor: '#4CAF50', borderRadius: '50%' }} />
                                            <Typography variant="body2">Income</Typography>
                                        </Box>
                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                            <Box sx={{ width: 12, height: 12, bgcolor: '#FF9800', borderRadius: '50%' }} />
                                            <Typography variant="body2">Expenses</Typography>
                                        </Box>
                                    </Box>
                                </Box>
                                <ResponsiveContainer width="100%" height={300}>
                                    <LineChart data={mockTrendData}>
                                        <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                                        <XAxis dataKey="month" stroke="rgba(255,255,255,0.5)" />
                                        <YAxis stroke="rgba(255,255,255,0.5)" />
                                        <Tooltip
                                            contentStyle={{
                                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                                border: '1px solid rgba(255, 255, 255, 0.2)',
                                                borderRadius: '8px',
                                                color: 'white'
                                            }}
                                        />
                                        <Line
                                            type="monotone"
                                            dataKey="Income"
                                            stroke="#4CAF50"
                                            strokeWidth={3}
                                            dot={{ fill: '#4CAF50', strokeWidth: 2, r: 4 }}
                                        />
                                        <Line
                                            type="monotone"
                                            dataKey="Expenses"
                                            stroke="#FF9800"
                                            strokeWidth={3}
                                            dot={{ fill: '#FF9800', strokeWidth: 2, r: 4 }}
                                        />
                                    </LineChart>
                                </ResponsiveContainer>
                            </CardContent>
                        </Card>
                    </Grid>

                    {/* Recent Transactions */}
                    <Grid item xs={12} lg={4}>
                        <Card
                            sx={{
                                bgcolor: 'rgba(255, 255, 255, 0.05)',
                                backdropFilter: 'blur(10px)',
                                border: '1px solid rgba(255, 255, 255, 0.1)',
                                color: 'white',
                                height: 400
                            }}
                        >
                            <CardContent>
                                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                                    <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                                        Recent Transaction
                                    </Typography>
                                    <Button
                                        size="small"
                                        sx={{ color: '#00D4AA', textTransform: 'none' }}
                                        onClick={() => setSelectedMenuItem('Transactions')}
                                    >
                                        See all
                                    </Button>
                                </Box>
                                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                    {recentTransactions.map((transaction) => (
                                        <Box key={transaction._id} sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                            <Avatar
                                                src={transaction.user_profile}
                                                sx={{ width: 40, height: 40 }}
                                            />
                                            <Box sx={{ flexGrow: 1 }}>
                                                <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                                                    {transaction.category === 'Revenue' ? 'Transfer from' : 'Transfer to'}
                                                </Typography>
                                                <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                                                    {transaction.user_id}
                                                </Typography>
                                            </Box>
                                            <Typography
                                                variant="body2"
                                                sx={{
                                                    fontWeight: 'bold',
                                                    color: getAmountColor(transaction.category)
                                                }}
                                            >
                                                {formatAmount(transaction.amount, transaction.category)}
                                            </Typography>
                                        </Box>
                                    ))}
                                </Box>
                            </CardContent>
                        </Card>
                    </Grid>
                </Grid>

                {/* Transactions Table */}
                <Card
                    sx={{
                        bgcolor: 'rgba(255, 255, 255, 0.05)',
                        backdropFilter: 'blur(10px)',
                        border: '1px solid rgba(255, 255, 255, 0.1)',
                        color: 'white',
                        mt: 4
                    }}
                >
                    <CardContent>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                            <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                                Transactions
                            </Typography>
                            <Box sx={{ display: 'flex', gap: 2 }}>
                                <TextField
                                    placeholder="Search for anything..."
                                    size="small"
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    sx={{
                                        '& .MuiOutlinedInput-root': {
                                            bgcolor: 'rgba(255, 255, 255, 0.05)',
                                            color: 'white',
                                            '& fieldset': { borderColor: 'rgba(255, 255, 255, 0.2)' },
                                            '&:hover fieldset': { borderColor: 'rgba(255, 255, 255, 0.3)' },
                                            '&.Mui-focused fieldset': { borderColor: '#00D4AA' }
                                        }
                                    }}
                                    InputProps={{
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <SearchIcon sx={{ color: 'rgba(255, 255, 255, 0.5)' }} />
                                            </InputAdornment>
                                        ),
                                    }}
                                />
                                <Button
                                    variant="outlined"
                                    startIcon={<FilterIcon />}
                                    onClick={() => setFilterDialogOpen(true)}
                                    sx={{
                                        borderColor: 'rgba(255, 255, 255, 0.2)',
                                        color: 'white',
                                        '&:hover': { borderColor: 'rgba(255, 255, 255, 0.3)' }
                                    }}
                                >
                                    Filter
                                </Button>
                                <Button
                                    variant="contained"
                                    startIcon={<ExportIcon />}
                                    onClick={() => setExportDialogOpen(true)}
                                    sx={{
                                        bgcolor: '#00D4AA',
                                        '&:hover': { bgcolor: '#00B896' }
                                    }}
                                >
                                    Export
                                </Button>
                            </Box>
                        </Box>

                        <TableContainer>
                            <Table>
                                <TableHead>
                                    <TableRow>
                                        <TableCell sx={{ color: 'rgba(255, 255, 255, 0.7)', fontWeight: 'bold' }}>Name</TableCell>
                                        <TableCell sx={{ color: 'rgba(255, 255, 255, 0.7)', fontWeight: 'bold' }}>Date</TableCell>
                                        <TableCell sx={{ color: 'rgba(255, 255, 255, 0.7)', fontWeight: 'bold' }}>Amount</TableCell>
                                        <TableCell sx={{ color: 'rgba(255, 255, 255, 0.7)', fontWeight: 'bold' }}>Status</TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {filteredTransactions
                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                                        .map((transaction) => (
                                            <TableRow key={transaction._id}>
                                                <TableCell>
                                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                                        <Avatar
                                                            src={transaction.user_profile}
                                                            sx={{ width: 32, height: 32 }}
                                                        />
                                                        <Typography sx={{ color: 'white' }}>
                                                            {transaction.user_id}
                                                        </Typography>
                                                    </Box>
                                                </TableCell>
                                                <TableCell sx={{ color: 'white' }}>
                                                    {formatDate(transaction.date)}
                                                </TableCell>
                                                <TableCell>
                                                    <Typography
                                                        sx={{
                                                            color: getAmountColor(transaction.category),
                                                            fontWeight: 'bold'
                                                        }}
                                                    >
                                                        {formatAmount(transaction.amount, transaction.category)}
                                                    </Typography>
                                                </TableCell>
                                                <TableCell>
                                                    <Chip
                                                        label={transaction.status}
                                                        color={getStatusColor(transaction.status)}
                                                        size="small"
                                                        sx={{ fontWeight: 'bold' }}
                                                    />
                                                </TableCell>
                                            </TableRow>
                                        ))}
                                </TableBody>
                            </Table>
                        </TableContainer>

                        <TablePagination
                            component="div"
                            count={filteredTransactions.length}
                            page={page}
                            onPageChange={(_, newPage) => setPage(newPage)}
                            rowsPerPage={rowsPerPage}
                            onRowsPerPageChange={(e) => setRowsPerPage(parseInt(e.target.value, 10))}
                            sx={{ color: 'white' }}
                        />
                    </CardContent>
                </Card>
            </Box>

            {/* Export Dialog */}
            <Dialog
                open={exportDialogOpen}
                onClose={() => setExportDialogOpen(false)}
                PaperProps={{
                    sx: {
                        bgcolor: '#1a1a1a',
                        color: 'white',
                        minWidth: '400px'
                    }
                }}
            >
                <DialogTitle>Export Transactions</DialogTitle>
                <DialogContent>
                    <Typography variant="body2" sx={{ mb: 2, color: 'rgba(255, 255, 255, 0.7)' }}>
                        Select the columns you want to include in your CSV export:
                    </Typography>
                    {availableColumns.map((column) => (
                        <FormControlLabel
                            key={column.key}
                            control={
                                <Checkbox
                                    checked={selectedColumns.includes(column.key)}
                                    onChange={(e) => {
                                        if (e.target.checked) {
                                            setSelectedColumns([...selectedColumns, column.key]);
                                        } else {
                                            setSelectedColumns(selectedColumns.filter(col => col !== column.key));
                                        }
                                    }}
                                    sx={{ color: '#00D4AA' }}
                                />
                            }
                            label={column.label}
                            sx={{ display: 'block', color: 'white' }}
                        />
                    ))}
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setExportDialogOpen(false)} sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                        Cancel
                    </Button>
                    <Button
                        onClick={handleExport}
                        variant="contained"
                        sx={{ bgcolor: '#00D4AA', '&:hover': { bgcolor: '#00B896' } }}
                    >
                        Export CSV
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Filter Dialog */}
            <Dialog
                open={filterDialogOpen}
                onClose={() => setFilterDialogOpen(false)}
                PaperProps={{
                    sx: {
                        bgcolor: '#1a1a1a',
                        color: 'white',
                        minWidth: '400px'
                    }
                }}
            >
                <DialogTitle>Filter Transactions</DialogTitle>
                <DialogContent>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
                        <FormControl fullWidth>
                            <InputLabel sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>Category</InputLabel>
                            <Select
                                value={filters.category}
                                onChange={(e) => setFilters({ ...filters, category: e.target.value })}
                                sx={{ color: 'white' }}
                            >
                                <MenuItem value="">All</MenuItem>
                                <MenuItem value="Revenue">Revenue</MenuItem>
                                <MenuItem value="Expense">Expense</MenuItem>
                            </Select>
                        </FormControl>
                        <FormControl fullWidth>
                            <InputLabel sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>Status</InputLabel>
                            <Select
                                value={filters.status}
                                onChange={(e) => setFilters({ ...filters, status: e.target.value })}
                                sx={{ color: 'white' }}
                            >
                                <MenuItem value="">All</MenuItem>
                                <MenuItem value="Paid">Paid</MenuItem>
                                <MenuItem value="Pending">Pending</MenuItem>
                            </Select>
                        </FormControl>
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button
                        onClick={() => {
                            setFilters({
                                category: '',
                                status: '',
                                startDate: '',
                                endDate: '',
                                minAmount: '',
                                maxAmount: ''
                            });
                            setFilterDialogOpen(false);
                        }}
                        sx={{ color: 'rgba(255, 255, 255, 0.7)' }}
                    >
                        Clear
                    </Button>
                    <Button
                        onClick={() => setFilterDialogOpen(false)}
                        variant="contained"
                        sx={{ bgcolor: '#00D4AA', '&:hover': { bgcolor: '#00B896' } }}
                    >
                        Apply Filters
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Snackbar for notifications */}
            <Snackbar
                open={snackbar.open}
                autoHideDuration={6000}
                onClose={() => setSnackbar({ ...snackbar, open: false })}
            >
                <Alert
                    onClose={() => setSnackbar({ ...snackbar, open: false })}
                    severity={snackbar.severity}
                    sx={{ width: '100%' }}
                >
                    {snackbar.message}
                </Alert>
            </Snackbar>
        </Box>
    );
};

export default App;