import { useState, useEffect } from 'react';
import {Box, Grid, CircularProgress, Alert} from '@mui/material';
import Sidebar from '../components/layout/Sidebar';
import Header from '../components/layout/Header';
import StatCard from '../components/dashboard/StatCard';
import OverviewChart from '../components/dashboard/OverviewChart';
import RecentTransactions from '../components/dashboard/RecentTransactions';
import TransactionsTable from '../components/dashboard/TransactionsTable';
import { getTransactionStats, getTransactions } from '../api/transactionService';
import type {DashboardStats, Transaction} from '../types';

const IconMap = {
    balance: <svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M19.007 10.6881V12.4033C19.007 12.8696 18.624 13.2526 18.1494 13.2526H16.5424C15.6432 13.2526 14.8189 12.5948 14.7439 11.6956C14.694 11.171 14.8938 10.6797 15.2435 10.3384C15.5516 10.022 15.9762 9.83878 16.4425 9.83878H18.1494C18.624 9.83878 19.007 10.2218 19.007 10.6881Z" fill="#1FCB4F"/>
        <path d="M13.4948 11.8038C13.4199 10.9296 13.7363 10.072 14.3691 9.44748C14.902 8.90626 15.643 8.58986 16.4423 8.58986H16.9169C17.1501 8.58986 17.3416 8.39835 17.3083 8.16521C17.0835 6.54989 15.6846 5.30093 14.011 5.30093H5.68465C3.84452 5.30093 2.3541 6.79136 2.3541 8.63149L2.3541 14.46C2.3541 16.3001 3.84452 17.7905 5.68465 17.7905H14.011C15.693 17.7905 17.0835 16.5416 17.3083 14.9262C17.3416 14.6931 17.1501 14.5016 16.9169 14.5016H16.5423C14.9602 14.5016 13.628 13.3192 13.4948 11.8038ZM11.5131 10.0886H6.51729C6.17591 10.0886 5.89281 9.81384 5.89281 9.46413C5.89281 9.11442 6.17591 8.83965 6.51729 8.83965H11.5131C11.8545 8.83965 12.1376 9.12275 12.1376 9.46413C12.1376 9.80551 11.8545 10.0886 11.5131 10.0886Z" fill="#1FCB4F"/>
        <path d="M12.5207 3.49407C12.7372 3.71889 12.5457 4.05194 12.2293 4.05194H5.70975C4.80218 4.05194 3.95288 4.31839 3.24514 4.77634C2.92041 4.9845 2.47911 4.75969 2.63731 4.40165C3.10359 3.31089 4.19435 2.55319 5.45163 2.55319H10.1311C11.0969 2.55319 11.9545 2.89457 12.5207 3.49407Z" fill="#1FCB4F"/>
    </svg>
    ,
    revenue: <svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M10.4313 2.02027L8.42461 6.69137H6.41795C6.0849 6.69137 5.76017 6.71635 5.44376 6.78296L6.2764 4.78463L6.30971 4.70969L6.35967 4.57647C6.38465 4.51818 6.4013 4.46823 6.42628 4.42659C7.39214 2.1868 8.47457 1.48738 10.4313 2.02027Z" fill="#1FCB4F"/>
        <path d="M16.0848 6.91624L16.0682 6.90791C15.5686 6.76637 15.0607 6.69143 14.5444 6.69143H9.33212L11.2056 2.33673L11.2305 2.27844C11.3471 2.32007 11.472 2.37836 11.5969 2.41999L13.437 3.19435C14.4612 3.61899 15.1772 4.06029 15.6185 4.59318C15.6935 4.6931 15.7601 4.78469 15.8267 4.89293C15.9016 5.0095 15.9599 5.12607 15.9932 5.25096C16.0265 5.3259 16.0515 5.39251 16.0682 5.46745C16.1931 5.8921 16.2014 6.37503 16.0848 6.91624Z" fill="#1FCB4F"/>
        <path d="M10.9141 14.8845H11.1222C11.372 14.8845 11.5802 14.6597 11.5802 14.385C11.5802 14.0352 11.4802 13.9853 11.2638 13.902L10.9141 13.7771V14.8845Z" fill="#1FCB4F"/>
        <path d="M15.7186 8.10687C15.3439 7.99862 14.9525 7.94034 14.5445 7.94034H6.41798C5.85179 7.94034 5.3189 8.04858 4.81932 8.26507C3.37053 8.88955 2.35471 10.33 2.35471 12.0036V13.6273C2.35471 13.8271 2.37136 14.0186 2.39634 14.2184C2.57952 16.8662 3.995 18.2817 6.6428 18.4566C6.8343 18.4815 7.02581 18.4982 7.23397 18.4982H13.7286C16.8093 18.4982 18.433 17.0328 18.5912 14.1185C18.5995 13.9603 18.6078 13.7938 18.6078 13.6273V12.0036C18.6078 10.1635 17.3838 8.61478 15.7186 8.10687ZM11.547 13.086C11.9301 13.2193 12.4463 13.5024 12.4463 14.385C12.4463 15.1427 11.8551 15.7505 11.1224 15.7505H10.9142V15.9337C10.9142 16.1751 10.7227 16.3666 10.4813 16.3666C10.2398 16.3666 10.0483 16.1751 10.0483 15.9337V15.7505H9.97335C9.17402 15.7505 8.51623 15.0761 8.51623 14.2434C8.51623 14.0019 8.70774 13.8104 8.94921 13.8104C9.19067 13.8104 9.38218 14.0019 9.38218 14.2434C9.38218 14.5931 9.64862 14.8845 9.97335 14.8845H10.0483V13.4774L9.41548 13.2526C9.03247 13.1194 8.51623 12.8363 8.51623 11.9537C8.51623 11.196 9.10741 10.5881 9.84013 10.5881H10.0483V10.4049C10.0483 10.1635 10.2398 9.97198 10.4813 9.97198C10.7227 9.97198 10.9142 10.1635 10.9142 10.4049V10.5881H10.9892C11.7885 10.5881 12.4463 11.2626 12.4463 12.0952C12.4463 12.3367 12.2548 12.5282 12.0133 12.5282C11.7719 12.5282 11.5803 12.3367 11.5803 12.0952C11.5803 11.7455 11.3139 11.4541 10.9892 11.4541H10.9142V12.8612L11.547 13.086Z" fill="#1FCB4F"/>
        <path d="M9.38213 11.9537C9.38213 12.3035 9.48204 12.3534 9.69853 12.4367L10.0482 12.5616V11.4542H9.84008C9.58196 11.4542 9.38213 11.679 9.38213 11.9537Z" fill="#1FCB4F"/>
    </svg>
    ,
    expenses: <svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M18.6066 6.46662C18.6066 7.01616 18.157 7.46579 17.6074 7.46579H2.95298C2.40344 7.46579 1.95381 7.01616 1.95381 6.46662V6.45829C1.95381 4.55155 3.49419 3.01117 5.40094 3.01117L15.1511 3.01117C17.0579 3.01117 18.6066 4.55988 18.6066 6.46662Z" fill="#1FCB4F"/>
        <path d="M1.95381 9.71389L1.95381 13.8854C1.95381 15.7922 3.49419 17.3325 5.40094 17.3325H15.1511C17.0579 17.3325 18.6066 15.7838 18.6066 13.8771V9.71389C18.6066 9.16435 18.157 8.71472 17.6074 8.71472H2.95298C2.40344 8.71472 1.95381 9.16435 1.95381 9.71389ZM6.94965 14.5432H5.28437C4.94299 14.5432 4.65989 14.2601 4.65989 13.9187C4.65989 13.5773 4.94299 13.2942 5.28437 13.2942H6.94965C7.29103 13.2942 7.57412 13.5773 7.57412 13.9187C7.57412 14.2601 7.29103 14.5432 6.94965 14.5432ZM12.3618 14.5432H9.03124C8.68986 14.5432 8.40676 14.2601 8.40676 13.9187C8.40676 13.5773 8.68986 13.2942 9.03124 13.2942H12.3618C12.7032 13.2942 12.9863 13.5773 12.9863 13.9187C12.9863 14.2601 12.7032 14.5432 12.3618 14.5432Z" fill="#1FCB4F"/>
    </svg>
    ,
    savings: <svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M10.7053 13.4358H11.2465C11.7877 13.4358 12.2373 12.9528 12.2373 12.37C12.2373 11.6456 11.9792 11.504 11.5546 11.3542L10.7136 11.0627V13.4358H10.7053Z" fill="#1FCB4F"/>
        <path d="M10.0559 1.76222C5.45969 1.77887 1.7378 5.51742 1.75445 10.1136C1.7711 14.7098 5.50965 18.4317 10.1058 18.415C14.702 18.3983 18.4239 14.6598 18.4072 10.0636C18.3906 5.46746 14.652 1.75389 10.0559 1.76222ZM11.9626 10.1719C12.6121 10.3967 13.4863 10.8796 13.4863 12.37C13.4863 13.6523 12.4788 14.6848 11.2465 14.6848H10.7053V15.1677C10.7053 15.5091 10.4222 15.7922 10.0808 15.7922C9.73946 15.7922 9.45636 15.5091 9.45636 15.1677V14.6848H9.15661C7.79108 14.6848 6.68367 13.5357 6.68367 12.1202C6.68367 11.7789 6.96677 11.4958 7.30815 11.4958C7.64953 11.4958 7.93263 11.7789 7.93263 12.1202C7.93263 12.8446 8.48217 13.4358 9.15661 13.4358H9.45636V10.6215L8.19908 10.1719C7.54962 9.94706 6.67535 9.46413 6.67535 7.97371C6.67535 6.69144 7.68284 5.65897 8.91514 5.65897H9.45636V5.17604C9.45636 4.83466 9.73946 4.55156 10.0808 4.55156C10.4222 4.55156 10.7053 4.83466 10.7053 5.17604V5.65897H11.0051C12.3706 5.65897 13.478 6.80801 13.478 8.2235C13.478 8.56488 13.1949 8.84798 12.8535 8.84798C12.5121 8.84798 12.229 8.56488 12.229 8.2235C12.229 7.4991 11.6795 6.90793 11.0051 6.90793H10.7053V9.72225L11.9626 10.1719Z" fill="#1FCB4F"/>
        <path d="M7.9325 7.98197C7.9325 8.70637 8.19061 8.84792 8.61526 8.99779L9.45622 9.28921V6.90787H8.91501C8.37379 6.90787 7.9325 7.3908 7.9325 7.98197Z" fill="#1FCB4F"/>
    </svg>

};

const DashboardPage = () => {
    const [stats, setStats] = useState<DashboardStats | null>(null);
    const [recent, setRecent] = useState<Transaction[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);
                const [statsData, recentData] = await Promise.all([
                    getTransactionStats(),
                    getTransactions({ page: 1, limit: 3, sortBy: 'date', sortOrder: 'desc' })
                ]);
                setStats(statsData);
                setRecent(recentData.transactions);
                setError(null);
            } catch (err) {
                setError('Failed to fetch dashboard data.');
                console.error(err);
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    return (
        <Box sx={{ display: 'flex', bgcolor: 'background.paper', }}>
            <Sidebar />
            <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
                <Header />

                {loading ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}><CircularProgress /></Box>
                ) : error ? (
                    <Alert severity="error" sx={{ mt: 4 }}>{error}</Alert>
                ) : stats ? (
                    <>
                        <Grid container sx={{display:"flex", justifyContent:"space-between", mb: 4 }}>
                            <StatCard title="Balance" value={stats.netProfit} icon={IconMap['balance']} color="#282C35" />
                            <StatCard title="Revenue" value={stats.totalRevenue} icon={IconMap['revenue']} color="#282C35" />
                            <StatCard title="Expenses" value={stats.totalExpenses} icon={IconMap['expenses']} color="#282C35" />
                            <StatCard title="Savings" value={stats.netProfit} icon={IconMap['savings']} color="#282C35" />
                        </Grid>

                        <Box sx={{display:'flex',justifyContent:'space-between', mb: 4 }}>
                            <OverviewChart data={stats.revenueVsExpensesTrend} />
                            <RecentTransactions transactions={recent} />
                        </Box>

                        <TransactionsTable/>
                    </>
                ) : null}
            </Box>
        </Box>
    );
};

export default DashboardPage;